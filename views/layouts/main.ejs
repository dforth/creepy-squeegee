<!DOCTYPE html>
<html>
  <head>
    <title><%= sails.config.site.title %></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap-datetimepicker.min.css">
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->

      <!--

        Client-side Javascript
        ========================

        You can always bring in JS files manually with `script` tags, or asynchronously
        on the client using a solution like AMD (RequireJS).  Or, if you like, you can
        take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, files in your `assets/js` folder are included here
        automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
        CoffeeScript (.coffee) are supported. In production, your scripts will be minified
        and concatenated into a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your scripts
            + Import scripts from other directories
            + Use a different preprocessor, like TypeScript

      -->

      <!--SCRIPTS-->
      <script src="/js/dependencies/sails.io.js"></script>
      <script src="/js/dependencies/jquery-2.1.3.js"></script>
      <script src="/js/dependencies/bootstrap.js"></script>
      <script src="/js/dependencies/moment.js"></script>
      <script src="/js/dependencies/bootstrap-datetimepicker.min.js"></script>
      <script src="/js/dependencies/common.js"></script>
      <script src="/js/dependencies/lodash.min.js"></script>
      <script src="/js/dependencies/react-with-addons.js"></script>
      <!--SCRIPTS END-->

      <script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>

  </head>

  <body>

    <script src="/jsx/ServerStatus.js" ></script>

    <div class="mainView">

        <nav class="navbar navbar-inverse navbar-static-top">
            <div class="container-fluid">
                <!-- Brand and toggle get grouped for better mobile display -->
                <div class="navbar-header">
                    <a class="navbar-brand" href="/home">How-To</a>
                </div>

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div>
                    <%- partial('../partials/nav', {
                        data: [
                            { label: "Password", href: "/password" },
                            { label: "Ratings", href: "/ratings" },
                            { label: "Graph", href: "/graph" },
                            { label: "Scroller", href: "/scroller" },
                            { label: "Chat", href: "/chat"}
                        ]
                    }) %>

                    <ul class="nav navbar-nav navbar-right">
                        <li class="navbar-text bold" id="statusContainer"><!-- server status control goes here --></li>
                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">About <span class="caret"></span></a>
                            <ul class="dropdown-menu" role="menu">
                                <li><a href="#">Version: <span class="bold"><%= UtilService.getVersion() %></span></a></li>
                                <li class="divider"></li>
                                <li><a href="http://github.com/dforth/creepy-squeegee" target="_blank" >GitHub Repo</a></li>
                            </ul>
                        </li>
                    </ul>
                </div><!-- /.navbar-collapse -->
            </div><!-- /.container-fluid -->
        </nav>

        <div class="pageBody">
            <%- partial('../partials/messages') %>
            <%- body %>
        </div>
    </div>


    <script>

        // Render a react element into the specified element
        var serverStatusControl = React.render(
                React.createElement(ServerStatus, {}),
                document.getElementById('statusContainer')
        );
    </script>

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->
  </body>
</html>

